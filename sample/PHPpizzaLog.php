<?php
//P210の日付バリデーションはこれ
$a = '2022-12-31';

var_dump( strtotime($a));
//int(1671667200) 1970/1/1 00:00:00 を0とした秒　エポックタイム


?>
<?php
$a = 9;  //グローバル(ローカルの反対)になりえる変数｡関数の外にある
//関数の中と外で定義した変数は別物です｡
//名前は一緒($a)だけと､違う物
//スコープ = 関数の有効範囲
//:: ← スコープ演算子(関数の中側から取り出して外側で使える
function test() {
    $a = 10;  // ローカル変数(限られた､限定的な領域の事｡関数の{}の中でしか有効でない)
echo $a; // ここでなら使える
}
echo test();
echo $a;
?>

<?php
$a = 9;  //このまま関数の内側でも使いたい
function test2($z) {
    //方法1⃣ ここでグローバル宣言する
   // global $a;  //スコープをまたいで有効にできる
   
   //方法2⃣ 引数($z)で渡す
echo $z; 
}
echo test();
?>

<?php
//タイプ = 型  
//        もらう値の型指定 戻り値の型指定
//なくても動くが､丁寧に書くと前後の処理が楽になる
function test(array $abc) :array{
    //return $abc[0]; //← 0番目の44を返す
   return $abc; 
}
//   ↓ここには数値で返ってくる
//echo test([44]); //この44は[]で囲まれているから配列
$a = [44, 33];
if( is_array($a)){ // ←配列しか受け取らない事になっているので不要
//↓ここは数値で返ってくる
echo test( $a );
}